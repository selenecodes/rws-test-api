### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateZipcode {
  _avg: ZipcodeAvgAggregateOutputType
  _count: ZipcodeCountAggregateOutputType
  _max: ZipcodeMaxAggregateOutputType
  _min: ZipcodeMinAggregateOutputType
  _sum: ZipcodeSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""Json custom scalar type"""
scalar Json

type Mutation {
  createManyZipcode(data: [ZipcodeCreateInput!]): BatchPayload!
  createOneZipcode(data: ZipcodeCreateInput!): Zipcode!
  deleteManyZipcode(where: ZipcodeWhereInput): BatchPayload!
  deleteOneZipcode(where: ZipcodeWhereUniqueInput!): Zipcode
  updateManyZipcode(data: ZipcodeUpdateManyMutationInput!, where: ZipcodeWhereInput): BatchPayload!
  updateOneZipcode(data: ZipcodeUpdateInput!, where: ZipcodeWhereUniqueInput!): Zipcode!
  upsertOneZipcode(create: ZipcodeCreateInput!, update: ZipcodeUpdateInput!, where: ZipcodeWhereUniqueInput!): Zipcode!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateZipcode(cursor: ZipcodeWhereUniqueInput, orderBy: [ZipcodeOrderByWithRelationInput], skip: Int, take: Int, where: ZipcodeWhereInput): AggregateZipcode
  findFirstZipcode(cursor: ZipcodeWhereUniqueInput, distinct: [ZipcodeScalarFieldEnum], orderBy: [ZipcodeOrderByWithRelationInput], skip: Int, take: Int, where: ZipcodeWhereInput): Zipcode
  findManyZipcode(cursor: ZipcodeWhereUniqueInput, distinct: [ZipcodeScalarFieldEnum], orderBy: [ZipcodeOrderByWithRelationInput], skip: Int, take: Int, where: ZipcodeWhereInput): [Zipcode!]!
  findManyZipcodeCount(cursor: ZipcodeWhereUniqueInput, distinct: [ZipcodeScalarFieldEnum], orderBy: [ZipcodeOrderByWithRelationInput], skip: Int, take: Int, where: ZipcodeWhereInput): Int!
  findUniqueZipcode(where: ZipcodeWhereUniqueInput!): Zipcode
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type Zipcode {
  alternatieve_schrijfwijzen: String
  createdAt: DateTime!
  gemeente: String
  id: Int!
  latitude: Float!
  longitude: Float!
  netnummer: String!
  postcode: Int!
  provincie: String!
  soort: String!
  woonplaats: String!
}

type ZipcodeAvgAggregateOutputType {
  id: Float
  latitude: Float
  longitude: Float
  postcode: Float
}

input ZipcodeAvgOrderByAggregateInput {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  postcode: SortOrder
}

type ZipcodeCountAggregateOutputType {
  _all: Int!
  alternatieve_schrijfwijzen: Int!
  createdAt: Int!
  gemeente: Int!
  id: Int!
  latitude: Int!
  longitude: Int!
  netnummer: Int!
  postcode: Int!
  provincie: Int!
  soort: Int!
  woonplaats: Int!
}

input ZipcodeCountOrderByAggregateInput {
  alternatieve_schrijfwijzen: SortOrder
  createdAt: SortOrder
  gemeente: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  netnummer: SortOrder
  postcode: SortOrder
  provincie: SortOrder
  soort: SortOrder
  woonplaats: SortOrder
}

input ZipcodeCreateInput {
  alternatieve_schrijfwijzen: String
  createdAt: DateTime
  gemeente: String
  latitude: Float!
  longitude: Float!
  netnummer: String!
  postcode: Int!
  provincie: String!
  soort: String!
  woonplaats: String!
}

input ZipcodeCreateManyInput {
  alternatieve_schrijfwijzen: String
  createdAt: DateTime
  gemeente: String
  id: Int
  latitude: Float!
  longitude: Float!
  netnummer: String!
  postcode: Int!
  provincie: String!
  soort: String!
  woonplaats: String!
}

type ZipcodeMaxAggregateOutputType {
  alternatieve_schrijfwijzen: String
  createdAt: DateTime
  gemeente: String
  id: Int
  latitude: Float
  longitude: Float
  netnummer: String
  postcode: Int
  provincie: String
  soort: String
  woonplaats: String
}

input ZipcodeMaxOrderByAggregateInput {
  alternatieve_schrijfwijzen: SortOrder
  createdAt: SortOrder
  gemeente: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  netnummer: SortOrder
  postcode: SortOrder
  provincie: SortOrder
  soort: SortOrder
  woonplaats: SortOrder
}

type ZipcodeMinAggregateOutputType {
  alternatieve_schrijfwijzen: String
  createdAt: DateTime
  gemeente: String
  id: Int
  latitude: Float
  longitude: Float
  netnummer: String
  postcode: Int
  provincie: String
  soort: String
  woonplaats: String
}

input ZipcodeMinOrderByAggregateInput {
  alternatieve_schrijfwijzen: SortOrder
  createdAt: SortOrder
  gemeente: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  netnummer: SortOrder
  postcode: SortOrder
  provincie: SortOrder
  soort: SortOrder
  woonplaats: SortOrder
}

input ZipcodeOrderByWithAggregationInput {
  _avg: ZipcodeAvgOrderByAggregateInput
  _count: ZipcodeCountOrderByAggregateInput
  _max: ZipcodeMaxOrderByAggregateInput
  _min: ZipcodeMinOrderByAggregateInput
  _sum: ZipcodeSumOrderByAggregateInput
  alternatieve_schrijfwijzen: SortOrder
  createdAt: SortOrder
  gemeente: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  netnummer: SortOrder
  postcode: SortOrder
  provincie: SortOrder
  soort: SortOrder
  woonplaats: SortOrder
}

input ZipcodeOrderByWithRelationInput {
  alternatieve_schrijfwijzen: SortOrder
  createdAt: SortOrder
  gemeente: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  netnummer: SortOrder
  postcode: SortOrder
  provincie: SortOrder
  soort: SortOrder
  woonplaats: SortOrder
}

enum ZipcodeScalarFieldEnum {
  alternatieve_schrijfwijzen
  createdAt
  gemeente
  id
  latitude
  longitude
  netnummer
  postcode
  provincie
  soort
  woonplaats
}

input ZipcodeScalarWhereWithAggregatesInput {
  AND: [ZipcodeScalarWhereWithAggregatesInput]
  NOT: [ZipcodeScalarWhereWithAggregatesInput]
  OR: [ZipcodeScalarWhereWithAggregatesInput]
  alternatieve_schrijfwijzen: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  gemeente: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
  netnummer: StringWithAggregatesFilter
  postcode: IntWithAggregatesFilter
  provincie: StringWithAggregatesFilter
  soort: StringWithAggregatesFilter
  woonplaats: StringWithAggregatesFilter
}

type ZipcodeSumAggregateOutputType {
  id: Int
  latitude: Float
  longitude: Float
  postcode: Int
}

input ZipcodeSumOrderByAggregateInput {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  postcode: SortOrder
}

input ZipcodeUncheckedCreateInput {
  alternatieve_schrijfwijzen: String
  createdAt: DateTime
  gemeente: String
  id: Int
  latitude: Float!
  longitude: Float!
  netnummer: String!
  postcode: Int!
  provincie: String!
  soort: String!
  woonplaats: String!
}

input ZipcodeUncheckedUpdateInput {
  alternatieve_schrijfwijzen: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gemeente: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  netnummer: StringFieldUpdateOperationsInput
  postcode: IntFieldUpdateOperationsInput
  provincie: StringFieldUpdateOperationsInput
  soort: StringFieldUpdateOperationsInput
  woonplaats: StringFieldUpdateOperationsInput
}

input ZipcodeUncheckedUpdateManyInput {
  alternatieve_schrijfwijzen: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gemeente: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  netnummer: StringFieldUpdateOperationsInput
  postcode: IntFieldUpdateOperationsInput
  provincie: StringFieldUpdateOperationsInput
  soort: StringFieldUpdateOperationsInput
  woonplaats: StringFieldUpdateOperationsInput
}

input ZipcodeUpdateInput {
  alternatieve_schrijfwijzen: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gemeente: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  netnummer: StringFieldUpdateOperationsInput
  postcode: IntFieldUpdateOperationsInput
  provincie: StringFieldUpdateOperationsInput
  soort: StringFieldUpdateOperationsInput
  woonplaats: StringFieldUpdateOperationsInput
}

input ZipcodeUpdateManyMutationInput {
  alternatieve_schrijfwijzen: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gemeente: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  netnummer: StringFieldUpdateOperationsInput
  postcode: IntFieldUpdateOperationsInput
  provincie: StringFieldUpdateOperationsInput
  soort: StringFieldUpdateOperationsInput
  woonplaats: StringFieldUpdateOperationsInput
}

input ZipcodeWhereInput {
  AND: [ZipcodeWhereInput]
  NOT: [ZipcodeWhereInput]
  OR: [ZipcodeWhereInput]
  alternatieve_schrijfwijzen: StringNullableFilter
  createdAt: DateTimeFilter
  gemeente: StringNullableFilter
  id: IntFilter
  latitude: FloatFilter
  longitude: FloatFilter
  netnummer: StringFilter
  postcode: IntFilter
  provincie: StringFilter
  soort: StringFilter
  woonplaats: StringFilter
}

input ZipcodeWhereUniqueInput {
  id: Int
}
